---
title: "Figures for the JASA article"
author: "Guillaume"
output: 
  html_document:
    toc: true
    theme: united
    number_sections: true
---


```{r,include=FALSE}
library(knitr)
opts_chunk$set(
  concordance = TRUE,
  warning = FALSE,
  cache = T,
  message = FALSE,
  echo = FALSE
)

library(tidyverse)
library(parallel)
library(fitdistrplus)
library(gridExtra)
# library(DPpackage)
library(BNPdensity)
library(survival)
library(ggthemes)
library(sn)
library(forcats)
```


#Analysis on real data


```{r}
source('load_rivm_db.R')
```


```{r, cache=FALSE}
source('SSD_fit_functions.R')
source('fit_analysis_functions.R')
```
```{r}
save_the_plot_pdf = function(p, fname){
  pdf(paste("../",fname, ".pdf", sep = ''))
  print(p)
  dev.off()
  print(p)
}
```


```{r}

CAS_sorted_by_size = rivm_db %>% 
  .$CAS %>% 
  unique() %>% 
  # .[1:50] %>%
  as.character() %>% 
  mclapply(FUN = function(cas){
    data.frame(cas = cas, ndat = get_log_dat(contaminant = cas, cens = F, centred_scaled = T, jittered = T, factor = 0.5, geomean = T, filt_hickey = T, names = T) %>% length())
  }, mc.cores = detectCores()) %>% 
  Reduce(rbind,.) %>% 
  subset(ndat>0) %>% 
  arrange(desc(ndat)) %>% 
  .$cas

plot_raw_data = function(ex_c_list, ncol = NULL, size = 3){
  ex_c_list %>% 
  mclapply(FUN = function(x) {
    get_log_dat(x, cens = F, centred_scaled = F, jittered = T, factor = 0.5, geomean = T, filt_hickey = T, names = T) %>% 
      (function(dat_){
        if(length(dat_)==0) data.frame(dat = NA, contaminant = NA, ndat = NA, mm = NA)
        else data.frame(dat = dat_, contaminant = x, ndat = length(dat_), mm = mean(dat_, na.rm = T))})
    }, mc.cores = detectCores()) %>% 
  Reduce(rbind,.) %>%
  na.omit() %>%
  mutate(contaminant = factor(contaminant, levels = CAS_sorted_by_size)) %>% 
  ggplot(aes(x = dat)) + 
  geom_histogram(aes(y = ..density..), bins = 15) +
  facet_wrap( ~ contaminant, scales = 'free', ncol = ncol)  +
  geom_text(aes(label = ndat,  x = mm), colour = 'blue', y = 0.4, size = size)
}
```
##All large datasets

```{r, fig.height=60, fig.width=20, eval = F}

CAS_sorted_by_size %>% 
  # .$cas %>% 
  .[1:150] %>%
  plot_raw_data(ncol = 3, size = 10)
```


```{r}
#Selection for the JASA paper
# big_c_list = c('122145','7733020','298000')
# med_c_list = c('7632000','654660','91203')
# small_c_list = c('9016459','61791262','115208')
big_c_list = c('63252','10108642','7778509')
# med_c_list = c('56382','42615292','1420048')
med_c_list = c('56382','94757','52686')
# small_c_list = c('114261','10588019','2764729')
small_c_list = c('732116','10588019','300765')

ex_c_list = c(big_c_list, med_c_list, small_c_list) #%>% sapply(FUN = CAS_short_name_converter)
```


##A selection of large datasets



- `r ex_c_list[1]` (CAS: `r CAS_short_name_converter(ex_c_list[1])`)
- `r ex_c_list[2]` (CAS: `r CAS_short_name_converter(ex_c_list[2])`)
- `r ex_c_list[3]` (CAS: `r CAS_short_name_converter(ex_c_list[3])`)


```{r}

ex_c_list[1:3] %>%
  plot_raw_data

# rivm_db %>% 
#   subset(shorter_name %in% ex_c_list[1:3]) %>% 
#   group_by(shorter_name) %>% 
#   mutate(mm = mean(lconc.geomean, na.rm = T)) %>% 
#   ggplot(aes(x = lconc.geomean)) + 
#   geom_histogram(aes(y = ..density..)) +
#   facet_wrap( ~ shorter_name, scales = 'free')  +
#   geom_text(aes(label = n_noncensored_species_geomean,  x = mm), colour = 'blue', y = 0.4)
```


##A selection of medium datasets

- `r ex_c_list[4]` (CAS: `r CAS_short_name_converter(ex_c_list[4])`)
- `r ex_c_list[5]` (CAS: `r CAS_short_name_converter(ex_c_list[5])`)
- `r ex_c_list[6]` (CAS: `r CAS_short_name_converter(ex_c_list[6])`)

```{r}

ex_c_list[4:6] %>% 
  plot_raw_data

# rivm_db %>% 
#   subset(shorter_name %in% ex_c_list[4:6]) %>% 
#   group_by(shorter_name) %>% 
#   mutate(mm = mean(lconc.geomean, na.rm = T)) %>% 
#   ggplot(aes(x = lconc.geomean)) + 
#   geom_histogram(aes(y = ..density..), bins = 15) +
#   facet_wrap( ~ shorter_name, scales = 'free')  +
#   geom_text(aes(label = n_noncensored_species_geomean,  x = mm), colour = 'blue', y = 0.4) 
```

##A selection of small datasets

- `r ex_c_list[7]` (CAS: `r CAS_short_name_converter(ex_c_list[7])`)
- `r ex_c_list[8]` (CAS: `r CAS_short_name_converter(ex_c_list[8])`)
- `r ex_c_list[9]` (CAS: `r CAS_short_name_converter(ex_c_list[9])`)


```{r}

ex_c_list[7:9] %>% 
  plot_raw_data

# rivm_db %>% 
#   subset(shorter_name %in% ex_c_list[7:9]) %>% 
#   group_by(shorter_name) %>% 
#   mutate(mm = mean(lconc.geomean, na.rm = T)) %>% 
#   ggplot(aes(x = lconc.geomean)) + 
#   geom_histogram(aes(y = ..density..), bins = 8) +
#   facet_wrap( ~ shorter_name, scales = 'free')  +
#   geom_text(aes(label = n_noncensored_species_geomean,  x = mm), colour = 'blue', y = 0.4) 
```


##Fit various SSDs

```{r, cache=FALSE}

is.censored = function(ddat){
  if(is.null(ncol(ddat))) FALSE
  else if(ncol(ddat)==1) FALSE
  else if(ncol(ddat)==2) TRUE
  else stop('Wrong type/dim of data input')
}



fit_all_methods = function(dataset){
  list(fit_normal_ssd_on_log_data, 
           # function(x) fit_BNP_mixture_ssd_on_log_data_truncated_normal(ddat = x, mu.pz0 = 0.5, sigma.pz0 = 1, Nit = 22000),
           function(x) fit_BNP_mixture_ssd_on_log_data_uniform(ddat = x, mu.pz0 = 0.1, sigma.pz0 = 1.5, Nit = 22000)
      ) %>% 
    (function(l){
      if(is.censored(dataset)) l
      else c(l,list(fit_kernel_mixture_ssd_on_log_data))
    }) %>% 
        lapply(FUN =  function(method){
          method(dataset) 
        }) 
}

fit_all_loo_methods = function(dataset){
  list(fit_normal_ssd_on_log_data) %>% 
    (function(l){
      if(is.censored(dataset)) l
      else c(l,list(fit_kernel_mixture_ssd_on_log_data))
    }) %>%  
        lapply(FUN =  function(method){
          method(dataset) 
        }) 
}

fit_all_methods_on_the_dataset = function(cid, cens = F){
  ex_c_list[cid] %>% 
    get_log_dat(cens = cens, centred_scaled = F, jittered = T, factor = 0.5, geomean = T, names = F, filt_hickey = T) %>% 
    fit_all_methods
}

fit_and_save = function(cid, cens = F){
  fit_list = fit_all_methods_on_the_dataset(cid, cens)
  fname = paste('fit_list',cid,'.Rdata', sep = '') %>% 
    (function(fnam){
      if(cens) fnam %>% gsub('.Rdata','_cens.Rdata',.)
      else fnam
    })
  
  save(fit_list, file = fname)
}

load_saved = function(cid, cens = F){
  fname = paste('fit_list',cid,'.Rdata', sep = '') %>% 
    (function(fnam){
      if(cens) fnam %>% gsub('.Rdata','_cens.Rdata',.)
      else fnam})
  get(load(fname))
}

remove_labels = function(p){
  p +
    theme(legend.position = 'none') +
    xlab('') +
    ylab('')
}

clean_background = function(p){
  p +
    theme_bw() +
  #eliminates background, gridlines, and chart border
  theme(
    plot.background = element_blank()
   ,panel.grid.major = element_blank()
   ,panel.grid.minor = element_blank()
   ,panel.border = element_blank()
  ) 
}

clean_background_and_legend = function(p){
  p2 = p %>% 
    clean_background 
  p2 %>% 
    remove_labels
}

plot_and_save_dens_for_art = function(cid, cens = F, ...){
  
  fit_list = load_saved(cid, cens) %>% select_final_methods
  
  p = fit_list %>% 
    comparison_densplot(n_splitted_plot = 1)  %>% 
    clean_background_and_legend 
  
  p = p + theme(axis.line = element_line(colour = "black")) 
  
    plot(p)

    fname = paste('../densplot_',ex_c_list[cid],'.pdf', sep='') %>% 
    (function(fnam){
      if(cens) fnam %>% gsub('.pdf','_cens.pdf',.)
      else fnam
    })
    
    
  if (cens){
    p = p + scale_colour_manual(values = ggthemes::ggthemes_data$few$medium[c("red","blue")] %>% as.character())
  }
  else{
    p = p + scale_colour_manual(values = ggthemes::ggthemes_data$few$medium[c("red","green", "blue")] %>% as.character())
  }
    
  pdf(file = fname, ...)
  plot(p)
  dev.off()
  
}

plot_and_save_cpo_loo_for_art = function(cid, logsc = F, cens = F, ...){
  
  fit_list = load_saved(cid, cens) %>% select_final_methods
  
  p = fit_list %>% 
    plot_cpo_loo_boxplot(logsc = logsc) +
    scale_x_discrete(breaks = NULL) #+ 
    #scale_x_discrete(limits = c( 'normal_ssd','normal_kernel_mixture_ssd','semi_BNP_mixture_ssd_'), breaks = NULL)
  
  p = p %>% 
    clean_background_and_legend
  
  p = p + theme(axis.line = element_line(colour = "black")) 
  
    plot(p)
    
        fname = paste('../cpo_loo_boxplot_',ex_c_list[cid],'.pdf', sep='') %>% 
    (function(fnam){
      if(cens) fnam %>% gsub('.pdf','_cens.pdf',.)
      else fnam
    })
  
  if (cens){
    p = p + scale_fill_manual(values = ggthemes::ggthemes_data$few$medium[c("red","blue")] %>% as.character())
  }
  else{
    p = p + scale_fill_manual(values = ggthemes::ggthemes_data$few$medium[c("red","green", "blue")] %>% as.character())
  }
        
        
  pdf(file = fname, ...)
  plot(p)
  dev.off()
  
}

select_final_methods = function(fit_list){
  exclusion_mask = lapply(fit_list, function(x)x$qmethod) %>% 
    unlist %>% 
    grepl("truncated",.) 
  selection_mask = !exclusion_mask
  
  fit_list[selection_mask] %>% 
    return
}

plot_and_save_quantile_comparison_for_art = function(cid, cens = F, ...){
  
  fit_list = load_saved(cid, cens) %>% select_final_methods
  
  p = fit_list %>% 
    plot_compare_given_quantiles(numit = 50, nbootsamples = 10**2) +
    coord_flip() #+ 
    # scale_x_discrete(limits = c( 'semi_BNP_mixture_ssd_','normal_kernel_mixture_ssd','normal_ssd'), breaks = NULL)
  
  p = p %>% 
    clean_background_and_legend
  
    p = p + theme(axis.line = element_line(colour = "black"))

  
  plot(p)
  
  fname = paste('../quantile_comparison_',ex_c_list[cid],'.pdf', sep='') %>% 
    (function(fnam){
      if(cens) fnam %>% gsub('.pdf','_cens.pdf',.)
      else fnam
    })
  
  if (cens){
    p = p + scale_colour_manual(values = ggthemes::ggthemes_data$few$medium[c("red","blue")] %>% as.character())
  }
  else{
    p = p + scale_colour_manual(values = ggthemes::ggthemes_data$few$medium[c("red","green", "blue")] %>% as.character())
  }
    
  
  pdf(file = fname, ...)
  plot(p)
  dev.off()
  
  
}


plot_and_save_for_art = function(cid, cens = F, width = 3, height = 3){
  plot_and_save_dens_for_art(cid = cid, cens, width = width, height = height)
  plot_and_save_cpo_loo_for_art(cid = cid, cens, width = width, height = height, logsc = T)
  plot_and_save_quantile_comparison_for_art(cid = cid, cens, width = width, height = height)
}

loo_i = function(dataset, i){
  if(is.censored(dataset)) loo_i_cens(dataset, i)
    else loo_i_ncens(dataset, i)
}

loo_i_ncens = function(dataset, i){
  dataset[-i] %>% 
    fit_all_loo_methods %>%
    lapply(FUN = function(xx) {
      get_dens(xx, xs = dataset[i]) %>% 
        data.frame('x' = dataset[[i]], 'loo' = .) %>% 
        mutate(type = xx$qmethod)
    }) %>% 
    Reduce(rbind,.)
}

loo_i_cens = function(dataset, i){
  dataset[-i,] %>% 
    fit_all_loo_methods %>%
    lapply(FUN = function(xx) {
      
      c_code = censor_code_rl(dataset[i,]$left,dataset[i,]$right)
      
      if(c_code == 1) loo = get_dens(xx, xs = dataset[i,]$left)
      if(c_code == 2) loo = get_cdf(xx, xs = dataset[i,]$right)
      if(c_code == 0) loo = 1 - get_cdf(xx, xs = dataset[i,]$left)
      if(c_code == 3) loo = get_cdf(xx, xs = dataset[i,]$right) - get_cdf(xx, xs = dataset[i,]$left)
      
      data.frame('x' = dataset[i,], 'loo' = loo) %>% 
        mutate(type = xx$qmethod)
    }) %>% 
    Reduce(rbind,.)
}


loo = function(dataset){
  if(is.censored(dataset)) iters = seq_len(nrow(dataset))
  else iters = seq_along(dataset)
  iters %>%
    lapply(FUN = function(i) loo_i(dataset,i)) %>% 
    Reduce(rbind, .)
}

loo_fitlist = function(fit_list){
  loo(fit_list[[1]]$data_)
}

loo_and_cpo_fitlist=function(fit_list){
  fit_list[fit_list %>% lapply(FUN =  function(x) x$qmethod) %>% grepl('BNP',.)] %>%
    lapply(
      FUN = function(x) {
        data.frame(x = x$data_, loo = x$cpo, type = x$qmethod)
      }
    ) %>%
    Reduce(rbind,.) %>% 
    rbind(fit_list %>% 
    loo_fitlist)
}

plot_cpo_loo_boxplot = function(fit_list, logsc = F){
  
  p = fit_list %>%
    loo_and_cpo_fitlist %>%
    mutate(type =  factor(type,levels = sort(as.character(unique(
      type
    ))))) %>% 
    ggplot(aes(x = type, y = loo, fill = type)) +
    geom_boxplot(width = 0.5)
  
    if(logsc) p = p + scale_y_log10()
    
    p = p + 
    theme_few() + 
    scale_colour_few()
    
    return(p)
}


plot_dens_and_CDF_zoom = function(fit_list, xlim_ = NULL, ylim_ = NULL){
  q_and_CI = fit_list %>% 
  compare_quantiles_and_CI %>% 
  mutate(y = 0.1 + seq_along(model) * 0.05) %>% 
  dplyr::rename(type = model)
  
  
  if(is.null(xlim_)) {
    xlim_ = fit_list[[1]]$data_ %>% 
      (function(x) {
        if(is.censored(x)) 0.5*(x$left + x$right)
        else x   
        }) %>%
      (function(x) c(min(x, na.rm = T) - 2, x %>% median(na.rm = T)))
                                     }
  if(is.null(ylim_)) ylim_ = c(0,0.5)

p1 = fit_list %>% 
    comparison_densplot(n_splitted_plot = 1)  %>% 
    clean_background_and_legend 

p2 = fit_list %>% 
    comparison_CDFplot(n_splitted_plot = 1, xs = seq(xlim_[1], xlim_[2], length.out = 50))  %>% 
    clean_background_and_legend 

p3 = p2 + 
  geom_hline(yintercept = 0.05, linetype = 'dashed', colour = 'red', alpha = 0.5) + 
  geom_errorbarh(data = q_and_CI, aes(x = HC, xmin = C_inf, xmax = C_sup, y = y)) + 
  ggtitle('') +
  xlim(xlim_) + 
  ylim(ylim_)
  
grid.arrange(p1, p3, nrow = 1)
}

```

```{r, eval = F}
1:9 %>% 
  mclapply(FUN = fit_and_save, mc.cores = detectCores() - 1 , mc.preschedule = F)

1:9 %>% 
  mclapply(FUN = function(cid) fit_and_save(cid = cid, cens = T), mc.cores = detectCores() - 1 , mc.preschedule = F)
```

##`r ex_c_list[1]`

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list1 = load_saved(1)
```

```{r, cache=F}

plot_and_save_for_art(cid = 1)
  
```

```{r, eval=T}
fit_list1 %>% plot_cpo_loo_boxplot
```


```{r}

plot_dens_and_CDF_zoom(fit_list1)

```

##`r ex_c_list[2]`

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list2 = load_saved(2)
```

```{r, cache=F}

plot_and_save_for_art(cid = 2)
  
```

```{r, eval=T}
fit_list2 %>% plot_cpo_loo_boxplot
```

```{r}
plot_dens_and_CDF_zoom(fit_list2)

```



##`r ex_c_list[3]`

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list3 = load_saved(3)
```

```{r, cache=F}

plot_and_save_for_art(cid = 3)
  
```

```{r, eval=T}
fit_list3 %>% plot_cpo_loo_boxplot
```


```{r}
plot_dens_and_CDF_zoom(fit_list3)

```


##`r ex_c_list[4]`

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list4 = load_saved(4)
```

```{r, cache=F}

plot_and_save_for_art(cid = 4)
  
```

```{r, eval=T}
fit_list4 %>% plot_cpo_loo_boxplot
```



```{r}
plot_dens_and_CDF_zoom(fit_list4)

```



##`r ex_c_list[5]`




```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list5 = load_saved(5)
```

```{r, cache=F}

plot_and_save_for_art(cid = 5)
  
```

```{r, eval=T}
fit_list5 %>% plot_cpo_loo_boxplot
```


```{r}
plot_dens_and_CDF_zoom(fit_list5)

```



##`r ex_c_list[6]`

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list6 = load_saved(6)
```

```{r, cache=F}

plot_and_save_for_art(cid = 6)
  
```

```{r, eval=T}
fit_list6 %>% plot_cpo_loo_boxplot
```




```{r}
plot_dens_and_CDF_zoom(fit_list6)

```



##`r ex_c_list[7]`

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list7 = load_saved(7)
```

```{r, cache=F}

plot_and_save_for_art(cid = 7)
  
```

```{r, eval=T}
fit_list7 %>% plot_cpo_loo_boxplot
```


```{r}
plot_dens_and_CDF_zoom(fit_list7)

```



##`r ex_c_list[8]`

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list8 = load_saved(8)
```

```{r, cache=F}

plot_and_save_for_art(cid = 8)
  
```

```{r, eval=T}
fit_list8 %>% plot_cpo_loo_boxplot
```


```{r}
plot_dens_and_CDF_zoom(fit_list8)

```



##`r ex_c_list[9]`

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list9 = load_saved(9)
```

```{r, cache=F}

plot_and_save_for_art(cid = 9)
  
```

```{r, eval=T}
fit_list9 %>% plot_cpo_loo_boxplot
```



```{r}
plot_dens_and_CDF_zoom(fit_list9)

```



##`r ex_c_list[1]` censored

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list1 = load_saved(1, cens = T)
```

```{r, cache=F}

plot_and_save_for_art(cid = 1, cens = T)
  
```

```{r, eval=T}
fit_list1 %>% plot_cpo_loo_boxplot
```


```{r}

plot_dens_and_CDF_zoom(fit_list1)

```


##`r ex_c_list[2]` censored

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list2 = load_saved(2, cens = T)
```

```{r, cache=F}

plot_and_save_for_art(cid = 2, cens = T)
  
```

```{r, eval=T}
fit_list2 %>% plot_cpo_loo_boxplot
```

```{r}
plot_dens_and_CDF_zoom(fit_list2)

```



##`r ex_c_list[3]` censored

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list3 = load_saved(3, cens = T)
```

```{r, cache=F}

plot_and_save_for_art(cid = 3, cens = T)
  
```

```{r, eval=T}
fit_list3 %>% plot_cpo_loo_boxplot
```


```{r}
plot_dens_and_CDF_zoom(fit_list3)

```


##`r ex_c_list[4]` censored

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list4 = load_saved(4, cens = T)
```

```{r, cache=F}

plot_and_save_for_art(cid = 4, cens = T)
  
```

```{r, eval=T}
fit_list4 %>% plot_cpo_loo_boxplot
```



```{r}
plot_dens_and_CDF_zoom(fit_list4)

```



##`r ex_c_list[5]` censored

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list5 = load_saved(5, cens = T)
```

```{r, cache=F}

plot_and_save_for_art(cid = 5, cens = T)
  
```

```{r, eval=T}
fit_list5 %>% plot_cpo_loo_boxplot
```


```{r}
plot_dens_and_CDF_zoom(fit_list5)

```



##`r ex_c_list[6]` censored

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list6 = load_saved(6, cens = T)
```

```{r, cache=F}

plot_and_save_for_art(cid = 6, cens = T)
  
```

```{r, eval=T}
fit_list6 %>% plot_cpo_loo_boxplot
```



```{r}
plot_dens_and_CDF_zoom(fit_list6)

```



##`r ex_c_list[7]` censored

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list7 = load_saved(7, cens = T)
```

```{r, cache=F}

plot_and_save_for_art(cid = 7, cens = T)
  
```

```{r, eval=T}
fit_list7 %>% plot_cpo_loo_boxplot
```


```{r}
plot_dens_and_CDF_zoom(fit_list7)

```



##`r ex_c_list[8]` censored

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list8 = load_saved(8, cens = T)
```

```{r, cache=F}

plot_and_save_for_art(cid = 8, cens = T)
  
```

```{r, eval=T}
fit_list8 %>% plot_cpo_loo_boxplot
```


```{r}
plot_dens_and_CDF_zoom(fit_list8, xlim_ = c(-3,5))

```



##`r ex_c_list[9]` censored

```{r}
rm(list = grep('fit_list', ls(), value = T))

fit_list9 = load_saved(9, cens = T)
```

```{r, cache=F}

plot_and_save_for_art(cid = 9, cens = T)
  
```

```{r, eval=T}
fit_list9 %>% plot_cpo_loo_boxplot
```



```{r}
plot_dens_and_CDF_zoom(fit_list9)

```


#Analysis on simulated data


```{r}

make_fname = function(dataset_type, idx, method){
  paste('~/Seafile/auto_shared/chains_model_comparison_simulated_data/',
        dataset_type,'_', 
        idx,'_', 
        method, '.Rdata', sep = '')
}


create_funlist = function(nit){
  list('normal_ssd' = fit_normal_ssd_on_log_data, 
       'logis_ssd' = fit_logis_ssd_on_log_data,
       'kde_ssd' = fit_kernel_mixture_ssd_on_log_data,
       'BNP_mixture_uniform_prior' = function(x) fit_BNP_mixture_ssd_on_log_data_uniform(ddat = x, mu.pz0 = 0.1, sigma.pz0 = 1.5, Nit = nit),       
       'BNP_mixture_truncated_normal_prior' = function(x) fit_BNP_mixture_ssd_on_log_data_truncated_normal(ddat = x, mu.pz0 = 0.5, sigma.pz0 = 1, Nit = nit),
       'semi_BNP_mixture_gamma_prior' = function(x) fit_semi_BNP_mixture_ssd_on_log_data(ddat = x, Nit = nit)
       )
}

funlist = create_funlist(30)


Var = function(x,...){
  y = length(x)
  var(x,...)*(y-1)/y
}


Sd = function(x,...){
  y = length(x)
  sd(x,...)*sqrt((y-1)/y)
}

create_normal_datasets = function(size = 10, number = 40){
  set.seed(0)
  1:number %>% 
    lapply(FUN =  function(x) rnorm(n = size, mean = 0, sd = 1))
}
create_student_datasets = function(size = 10, number = 40, df = 3, ncp = -2){
  set.seed(0)
  1:number %>% 
    lapply(FUN =  function(x) rt(n = size, df = df, ncp = ncp))
}

normalise_weights = function(unnormalized_weights){
  unnormalized_weights / sum(unnormalized_weights)
}

rmixnorm = function(n, mus, sigmas, probs) {
  if(sum(probs)!=1) stop('check all the weights')
  if (length(unique(length(mus), length(sigmas), length(probs))) != 1){
    stop('Check your number of means, sds, unnormalized_weights')
  }
  
  rmultinom(n = 1, size = n, prob = probs) %>%
    as.numeric() %>%
    (function(x) {
      mapply(FUN = function(n_, mean_, sd_) {rnorm(n_, mean_, sd_)}, x, mus, sigmas)
    }) %>%
    unlist() %>% 
    as.vector()
}

create_multimodal_datasets = function(size = 10, number = 40, mus, sigmas, unnormalized_weights) {
  set.seed(0)
  1:number %>%
    lapply(
      FUN =  function(x) {
        rmixnorm(
          n = size, mus = mus, sigmas = sigmas, probs = unnormalized_weights %>% normalise_weights
        )
      }
    )
}

library(sn)

create_skewed_normal_datasets = function(size = 10, number = 40, xi = 0, omega = 1, alpha = -3){
  set.seed(0)
  1:number %>% 
    lapply(FUN =  function(x) rsn(n = size, xi = xi, omega = omega, alpha = alpha)%>% as.numeric()) 
}

create_dataset_list = function(){
  dataset_creators_list = list('normal' = create_normal_datasets,
                               'student' = create_student_datasets,
                               'skew_normal' = create_skewed_normal_datasets,
                               'multimodal' = function(size, number) create_multimodal_datasets(size = size, number = number,
                                                                                                mus = c(-2, 5),
                                                                                                sigmas = c(1,1),
                                                                                                unnormalized_weights = c(2,4)))
  sizes = c(10,20,50,100)
  expand.grid(dataset_creators_list %>% names, sizes) %>% 
    (function(grid){
      mapply(FUN = function(creator_name, size){dataset_creators_list[[creator_name]](size = size, number = 40)}, grid$Var1, grid$Var2, SIMPLIFY = F) %>% 
        setNames(mapply(FUN = function(creator_name, size) paste(creator_name, size, sep = ''), grid$Var1, grid$Var2, SIMPLIFY = F))})
}

dataset_list = create_dataset_list()



load_or_compute = function(dataset_type, idx, method){
  if(method%in%c('normal_ssd', 'logis_ssd', 'kde_ssd')) compute(dataset_type, idx, method)
  else{
    fname = make_fname(dataset_type, idx, method)
    if(file.exists(fname)) readRDS(fname)
    else compute_and_save_and_return(dataset_type, idx, method)
    }
}

save_if_not_present = function(dataset_type, idx, method){
  if(method%in%c('normal_ssd', 'logis_ssd', 'kde_ssd')) return()
  else{
    fname = make_fname(dataset_type, idx, method)
    if(file.exists(fname)) return()
    else compute_and_save(dataset_type, idx, method)
  }
}

compute = function(dataset_type, idx, method){
  get_data(dataset_type, idx) %>% 
    funlist[[method]]()
}

compute_and_save_and_return = function(dataset_type, idx, method){
  res = get_data(dataset_type, idx) %>% 
    funlist[[method]]()
  saveRDS(object = res, file = make_fname(dataset_type, idx, method))
  return(res)
}

compute_and_save = function(dataset_type, idx, method){
  res = get_data(dataset_type, idx) %>% 
    funlist[[method]]()
  saveRDS(object = res, file = make_fname(dataset_type, idx, method))
  return()
}

get_data = function(dataset_type, idx){
  dataset_list[[dataset_type]][[idx]]
}

fit_all_methods_on_all_the_datasets = function(dataset_list, funlist){
  
  dataset_list %>% 
    names %>% 
    lapply(FUN = function(dataset_type) expand.grid(dataset_type, 1:length(dataset_list[[dataset_type %>% as.character()]]), funlist %>% names, stringsAsFactors = F)) %>% 
    Reduce(rbind,.)  %>% 
    setNames(c('dataset_type', 'idx', 'method')) %>% 
    (function(grid){mcmapply(FUN = save_if_not_present, grid$dataset_type, grid$idx, grid$method, mc.cores = detectCores())})
  
}


get_quantiles_for_all_methods = function(list_of_list_of_fits, reference_quantile, numit = 2500, ncores = 6){
  list_of_list_of_fits %>% 
    lapply(FUN = function(list_of_fits){
      list_of_fits %>% 
        mclapply(FUN = function(fit){
          fit %>% 
            thin_fit(numit = numit) %>% 
            get_quantiles(ps = 0.05, par_ = F)}, mc.cores = ncores) %>% 
        unlist() %>% 
        (function(x) {c(mean(x), 
                        quantile(x, probs = c(0.025,0.5,0.975)), 
                        Sd(x), 
                        mean(abs(x-reference_quantile)),
                        mean(x-reference_quantile),
                        reference_quantile)} ) %>% 
        t %>% 
        data.frame() %>% 
        setNames(c('Mean_estimate','infCI','med','supCI', 'std', 'Mean_absolute_bias', 'Mean_bias', 'Reference')) %>% 
        mutate(type = list_of_fits[[1]]$qmethod)
          }) %>% 
        Reduce(rbind,.)
}

get_quantile_CI_mean_length_for_all_methods = function(list_of_list_of_fits, reference_quantile, numit = 2500, ncores = 6, nbootsamples = 102){
  list_of_list_of_fits %>% 
    lapply(FUN = function(list_of_fits){
      list_of_fits %>% 
        mclapply(FUN = function(fit){
          fit %>% 
            thin_fit(numit = numit) %>% 
            get_quantiles_and_CI(p = 0.05, par_ = F, nbootsamples = nbootsamples)}, mc.cores = ncores) %>% 
        Reduce(rbind,.) %>% 
        mutate(CI_length = C_sup-C_inf) %>% 
        (function(resdf) {c(mean(resdf$HC), 
                        quantile(resdf$HC, probs = c(0.025,0.5,0.975)), 
                        Sd(resdf$HC), 
                        mean(abs(resdf$HC-reference_quantile)),
                        mean(resdf$HC-reference_quantile),
                        reference_quantile,
                        mean(resdf$CI_length),
                        quantile(resdf$CI_length, probs = c(0.025,0.5,0.975)))} ) %>% 
        t %>% 
        data.frame() %>% 
        setNames(c('Mean_estimate','infCI','med','supCI', 'std', 'Mean_absolute_bias', 'Mean_bias', 'Reference', 'Mean_CI_length','len_infCI','len_med','len_supCI')) %>% 
        mutate(type = list_of_fits[[1]]$qmethod)
          }) %>% 
        Reduce(rbind,.)
}

format_est_CI = function(est, infCI, supCI){
  c(est, infCI, supCI) %>% 
    formatC(digits = 3) %>%
    (function(x){
      paste(x[[1]], ' [',x[[2]],';',x[[3]],']', sep = '')
    })
  }

print_quantiles_for_all_methods = function(quantiles_for_all_methods){
  quantiles_for_all_methods %>% 
    mutate(Mean_estimate_and_95CI = mapply(FUN = format_est_CI, Mean_estimate, infCI, supCI)) %>% 
    dplyr::select(c(Reference, Mean_estimate_and_95CI, Mean_bias, Mean_absolute_bias, std, type)) %>% 
    kable(digits = 3)
}

print_quantiles_and_CI_length_for_all_methods = function(quantiles_and_CI_length){
  quantiles_and_CI_length %>% 
    mutate(Mean_estimate_and_95CI = mapply(FUN = format_est_CI, Mean_estimate, infCI, supCI)) %>% 
    dplyr::select(c(Reference, Mean_estimate_and_95CI, Mean_bias, Mean_absolute_bias, std, type,Mean_CI_length)) %>% 
    kable(digits = 3)
}

get_average_density_estimates = function(list_of_list_of_fits, xs = seq(-3, 3, length.out = 30), ncores = 6){
  list_of_list_of_fits %>% 
    lapply(FUN = function(list_of_fits){
      list_of_fits %>% 
        mclapply(FUN = function(fit){
          fit %>% 
            get_dens(xs = xs)}, mc.cores = ncores) %>% 
        Reduce(cbind,.) %>% 
        rowMeans %>%  
        data.frame(dens = .) %>% 
        mutate(type = list_of_fits[[1]]$qmethod, xs = xs)
          }) %>% 
        Reduce(rbind,.)
}

plot_average_density_estimates = function(average_density_estimates, reference = NULL){
  
  p = average_density_estimates %>% 
    mutate(type = factor(type, levels = unique(type) %>% sort)) %>% 
      ggplot(aes(x = xs, y = dens, colour = type)) +
    ylab('Average density estimate') +
    xlab('')
  
  if(is.null(reference)){
    p + geom_line()
  } 
  else {
    refdens = average_density_estimates$xs %>% 
      data.frame(xs = ., dens = reference(.))
    
    p + 
      geom_line(linetype = 2, size = 1.5) +
      geom_line(data = refdens, aes(x = xs, y = dens), colour = 'black', size = 1.5)
  }
  
}

cmp_ISE_fit = function(fit, reference) {
  
  estimate = function(x) get_dens(fit = fit, xs = x)
  
  integrate(function(x) (estimate(x) - reference(x))**2,
            lower = -Inf,
            upper = Inf)
}

get_MISE_for_all_methods = function(list_of_list_of_fits, reference_dist, numit = 10**6, ncores = 6){
  list_of_list_of_fits %>% 
    lapply(FUN = function(list_of_fits){
      list_of_fits %>% 
        mclapply(FUN = function(fit){cmp_ISE_fit(fit %>% thin_fit(numit = numit), reference_dist)$value}, mc.cores = ncores) %>% 
        unlist() %>% 
        (function(x) c(mean(x), quantile(x, probs = c(0.025,0.5,0.975)), Sd(x)) ) %>% 
        t %>% 
        data.frame() %>% 
        setNames(c('MISE','infCI','med','supCI', 'std')) %>% 
        mutate(type = list_of_fits[[1]]$qmethod)
          }) %>% 
        Reduce(rbind,.)
}

print_RMISE_for_all_methods = function(MISE_for_all_methods){
  MISE_for_all_methods %>% 
    mutate(Mean_MISE_and_95CI = mapply(FUN = format_est_CI, MISE, infCI, supCI)) %>% 
    (function(x){
      if ('normal_kernel_mixture_ssd'%in%x$type ){
        MISE_nkerdens = as.numeric(subset(x,type == 'normal_kernel_mixture_ssd')$MISE)
        x %>% 
          mutate(RMISE = MISE/MISE_nkerdens)
      }
        else x
    }) %>% 
    dplyr::select(c(RMISE, Mean_MISE_and_95CI, std, type)) %>% 
    kable(digits = 3)
}


save_all_models = function(fits_for_all_methods, fname){
  save(fits_for_all_methods, file = paste('~/Seafile/auto_shared/chains_model_comparison_simulated_data/',fname,'.Rdata', sep = ''))
}


load_compute_or_pass = function(dataset_type, idx, method){
  if(method%in%c('normal_ssd', 'logis_ssd', 'kde_ssd')) compute(dataset_type, idx, method)
  else{
    fname = make_fname(dataset_type, idx, method)
    if(file.exists(fname)) readRDS(fname)
    else return()
    }
}

## A helper function that tests whether an object is either NULL _or_
## a list of NULLs
is.NullOb <- function(x) is.null(x) | all(sapply(x, is.null))
## Recursively step down into list, removing all such objects
rmNullObs <- function(x) {
x <- Filter(Negate(is.NullOb), x)
lapply(x, function(x) if (is.list(x)) rmNullObs(x) else x)
}

rmNull = function(list_){
  list_[!sapply(list_, is.null)]
}

get_all_fits = function(dataset_type){
  
  funlist %>% 
    names %>% 
    # .[1:3] %>% 
    lapply(FUN = function(fun){
      expand.grid(dataset_type, 1:length(dataset_list[[dataset_type %>% as.character()]]), fun, stringsAsFactors = F) %>% 
    setNames(c('dataset_type', 'idx', 'method')) %>% 
    (function(grid){mapply(FUN = load_compute_or_pass, grid$dataset_type, grid$idx, grid$method, SIMPLIFY = F)}) %>% rmNull
    })
  
}

Collect_in_a_single_file = function(dataset_type){
  res = get_all_fits(dataset_type)
  saveRDS(object = res, file = paste('~/Seafile/auto_shared/chains_model_comparison_simulated_data/',dataset_type,'.Rdata', sep = ''))
}

load_file = function(dataset_type){
  readRDS(paste('~/Seafile/auto_shared/chains_model_comparison_simulated_data/',dataset_type,'.Rdata', sep = ''))
}

```

```{r, eval = F}

expand.grid(c('normal', 'student', 'skew_normal','multimodal'), c(10,20,50,100)) %>% 
  (function(df) mapply(FUN = paste, df$Var1,df$Var2, sep = '')) %>% 
  lapply(Collect_in_a_single_file)

```


#Comparison on normal datasets

##Dataset of size 10

```{r, cache=F, eval=T}
rm(list = grep('fits', grep('_for_all_methods', ls(), value = T), value = T))

fits_on_normal10_for_all_methods = load_file('normal10')

```

###Mean bias on the fifth quantile

```{r, eval=T}
# fits_on_normal10_for_all_methods %>% 
#   get_quantiles_for_all_methods(reference_quantile = qnorm(0.05), numit = 10000) %>% 
#   print_quantiles_for_all_methods

fits_on_normal10_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qnorm(0.05), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```


###Mean Integrated square error

```{r, eval=T}
fits_on_normal10_for_all_methods %>% 
  get_MISE_for_all_methods(reference_dist = dnorm, numit = 2500) %>% 
  print_RMISE_for_all_methods
```

###Density plot

```{r, eval=T}
fits_on_normal10_for_all_methods %>% 
  get_average_density_estimates(xs = seq(-3,3,length.out = 52)) %>% 
  plot_average_density_estimates(dnorm)
```


##Dataset of size 20

```{r, cache=F, eval=T}

rm(list = grep('fits', grep('_for_all_methods', ls(), value = T), value = T))

fits_on_normal20_for_all_methods = load_file('normal20')


```

###Mean bias on the fifth quantile


```{r, eval=T}

fits_on_normal20_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qnorm(0.05), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_normal20_for_all_methods %>% 
  get_MISE_for_all_methods(reference = dnorm, numit = 2000) %>% 
  print_RMISE_for_all_methods
```

###Density plot


```{r, eval=T}
fits_on_normal20_for_all_methods %>% 
  get_average_density_estimates(xs = seq(-3,3,length.out = 52)) %>% 
  plot_average_density_estimates(dnorm)
```


##Dataset of size 50

```{r, cache=F, eval=T}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))


fits_on_normal50_for_all_methods = load_file('normal50')


```

###Mean bias on the fifth quantile


```{r, eval=T}
fits_on_normal50_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qnorm(0.05), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_normal50_for_all_methods %>% 
  get_MISE_for_all_methods(reference = dnorm, numit = 2000) %>% 
  print_RMISE_for_all_methods
```
###Density plot


```{r, eval=T}
fits_on_normal50_for_all_methods %>% 
  get_average_density_estimates(xs = seq(-3,3,length.out = 52)) %>% 
  plot_average_density_estimates(dnorm)
```



##Dataset of size 100

```{r, cache=F}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))


fits_on_normal100_for_all_methods = load_file('normal100')


```

###Mean bias on the fifth quantile


```{r, eval=T}
fits_on_normal100_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qnorm(0.05), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_normal100_for_all_methods %>% 
  get_MISE_for_all_methods(reference = dnorm, numit = 2000) %>% 
  print_RMISE_for_all_methods
```

###Density plot


```{r, eval=T}
fits_on_normal100_for_all_methods %>% 
  get_average_density_estimates(xs = seq(-3,3,length.out = 52)) %>% 
  plot_average_density_estimates(dnorm)
```



#Comparison on skew normal datasets

##Dataset of size 10

```{r, cache= F}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))



fits_on_skew_normal10_for_all_methods = load_file('skew_normal10')


xs_skew_normal = seq(-5,2,length.out = 52)
```

###Mean bias on the fifth quantile


```{r, eval=T}
fits_on_skew_normal10_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qsn(p = 0.05, xi = 0, omega = 1, alpha = -3), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_skew_normal10_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dsn(x, xi = 0, omega = 1, alpha = -3), numit = 2000) %>% 
  print_RMISE_for_all_methods
```

###Density plot

```{r, eval=T}
fits_on_skew_normal10_for_all_methods %>% 
  get_average_density_estimates(xs = xs_skew_normal) %>% 
  plot_average_density_estimates( function(x) dsn(x, xi = 0, omega = 1, alpha = -3))
```

##Dataset of size 20

```{r}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))

fits_on_skew_normal20_for_all_methods = load_file('skew_normal20')


```

###Mean bias on the fifth quantile


```{r, eval=T}
fits_on_skew_normal20_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qsn(p = 0.05, xi = 0, omega = 1, alpha = -3), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_skew_normal20_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dsn(x, xi = 0, omega = 1, alpha = -3), numit = 2000) %>% 
  print_RMISE_for_all_methods
```

###Density plot

```{r, eval=T}
fits_on_skew_normal20_for_all_methods %>% 
  get_average_density_estimates(xs = xs_skew_normal) %>% 
  plot_average_density_estimates(function(x) dsn(x, xi = 0, omega = 1, alpha = -3))
```

##Dataset of size 50

```{r, eval=T}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))


fits_on_skew_normal50_for_all_methods = load_file('skew_normal50')

```

###Mean bias on the fifth quantile


```{r, eval=T}
fits_on_skew_normal50_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qsn(p = 0.05, xi = 0, omega = 1, alpha = -3), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_skew_normal50_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dsn(x, xi = 0, omega = 1, alpha = -3), numit = 2000) %>% 
  print_RMISE_for_all_methods
```

###Density plot

```{r, eval=T}
fits_on_skew_normal50_for_all_methods %>% 
  get_average_density_estimates(xs = xs_skew_normal) %>% 
  plot_average_density_estimates(function(x) dsn(x, xi = 0, omega = 1, alpha = -3))
```

##Dataset of size 100

```{r}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))



fits_on_skew_normal100_for_all_methods = load_file('skew_normal100')


```

###Mean bias on the fifth quantile


```{r, eval=T}
fits_on_skew_normal100_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qsn(p = 0.05, xi = 0, omega = 1, alpha = -3), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_skew_normal100_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dsn(x, xi = 0, omega = 1, alpha = -3), numit = 2000, ncores = 6) %>% 
  print_RMISE_for_all_methods
```

###Density plot

```{r, eval=T}
fits_on_skew_normal100_for_all_methods %>% 
  get_average_density_estimates(xs = xs_skew_normal, ncores = 6) %>% 
  plot_average_density_estimates(function(x) dsn(x, xi = 0, omega = 1, alpha = -3))
```

#Comparison on student datasets

##Dataset of size 10

```{r, cache= F}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))



fits_on_student10_for_all_methods = load_file('student10')


xs_student = seq(-10,4,length.out = 52)
```

###Mean bias on the fifth quantile


```{r, eval=T}
fits_on_student10_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qt(p = 0.05, df = 3, ncp = -2), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_student10_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dt(x, df = 3, ncp = -2), numit = 2000) %>% 
  print_RMISE_for_all_methods
```

###Density plot

```{r, eval=T}
fits_on_student10_for_all_methods %>% 
  get_average_density_estimates(xs = xs_student) %>% 
  plot_average_density_estimates(function(x) dt(x, df = 3, ncp = -2))
```

##Dataset of size 20

```{r}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))

fits_on_student20_for_all_methods = load_file('student20')


```

###Mean bias on the fifth quantile


```{r, eval=T}
fits_on_student20_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qt(p = 0.05, df = 3, ncp = -2), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_student20_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dt(x, df = 3, ncp = -2), numit = 2000) %>% 
  print_RMISE_for_all_methods
```

###Density plot

```{r, eval=T}
fits_on_student20_for_all_methods %>% 
  get_average_density_estimates(xs = xs_student) %>% 
  plot_average_density_estimates(function(x) dt(x, df = 3, ncp = -2))
```

##Dataset of size 50

```{r, eval=T}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))


fits_on_student50_for_all_methods = load_file('student50')

```

###Mean bias on the fifth quantile


```{r, eval=T}
fits_on_student50_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qt(p = 0.05, df = 3, ncp = -2), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_student50_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dt(x, df = 3, ncp = -2), numit = 2000) %>% 
  print_RMISE_for_all_methods
```

###Density plot

```{r, eval=T}
fits_on_student50_for_all_methods %>% 
  get_average_density_estimates(xs = xs_student) %>% 
  plot_average_density_estimates(function(x) dt(x, df = 3, ncp = -2))
```

##Dataset of size 100

```{r}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))



fits_on_student100_for_all_methods = load_file('student100')


```

###Mean bias on the fifth quantile


```{r, eval=T}
fits_on_student100_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qt(p = 0.05, df = 3, ncp = -2), numit = 10000) %>% 
  print_quantiles_and_CI_length_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_student100_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dt(x, df = 3, ncp = -2), numit = 2000, ncores = 6) %>% 
  print_RMISE_for_all_methods
```

###Density plot

```{r, eval=T}
fits_on_student100_for_all_methods %>% 
  get_average_density_estimates(xs = xs_student, ncores = 6) %>% 
  plot_average_density_estimates(function(x) dt(x, df = 3, ncp = -2))
```

#Comparison on Multimodal normal datasets

##Dataset of size 10

```{r}
xs_multimodal = seq(-6,10,length.out = 100)

```


```{r}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))


fits_on_multimodal10_for_all_methods = load_file('multimodal10')


```

###Mean bias on the fifth quantile


```{r, eval=T}
 fits_on_multimodal10_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qmixnorm(p = 0.05, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights), numit = 10000, ncores = 6) %>% 
  print_quantiles_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_multimodal10_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dmixnorm(x, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights), numit = 2000, ncores = 6) %>% 
  print_RMISE_for_all_methods
```

###Density plot


```{r, eval=T}
fits_on_multimodal10_for_all_methods %>% 
  get_average_density_estimates(xs = xs_multimodal, ncores = 6) %>% 
  plot_average_density_estimates(function(x) dmixnorm(x, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights))
```


##Dataset of size 20

```{r}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))



fits_on_multimodal20_for_all_methods = load_file('multimodal20')


```

###Mean bias on the fifth quantile


```{r, eval=T}
 fits_on_multimodal20_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qmixnorm(p = 0.05, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights), numit = 10000, ncores = 6) %>% 
  print_quantiles_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_multimodal20_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dmixnorm(x, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights), numit = 2000, ncores = 6) %>% 
  print_RMISE_for_all_methods
```

###Density plot


```{r, eval=T}
fits_on_multimodal20_for_all_methods %>% 
  get_average_density_estimates(xs = xs_multimodal, ncores = 6) %>% 
  plot_average_density_estimates(function(x) dmixnorm(x, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights))
```


##Dataset of size 50

```{r}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))


fits_on_multimodal50_for_all_methods = load_file('multimodal50')


```

###Mean bias on the fifth quantile


```{r, eval=T}
 fits_on_multimodal50_for_all_methods %>% 
  get_quantile_CI_mean_length_for_all_methods(reference_quantile = qmixnorm(p = 0.05, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights), numit = 10000, ncores = 6) %>% 
  print_quantiles_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_multimodal50_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dmixnorm(x, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights), numit = 2000, ncores = 6) %>% 
  print_RMISE_for_all_methods
```

###Density plot


```{r, eval=T}
fits_on_multimodal50_for_all_methods %>% 
  get_average_density_estimates(xs = xs_multimodal, ncores = 6) %>% 
  plot_average_density_estimates(function(x) dmixnorm(x, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights))
```


##Dataset of size 100

```{r}

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))


fits_on_multimodal100_for_all_methods = load_file('multimodal100')


```

###Mean bias on the fifth quantile


```{r, eval=T}
 fits_on_multimodal100_for_all_methods %>% 
  get_quantiles_for_all_methods(reference_quantile = qmixnorm(p = 0.05, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights), numit = 10000, ncores = 6) %>% 
  print_quantiles_for_all_methods
```

###Mean Integrated square error


```{r, eval=T}
fits_on_multimodal100_for_all_methods %>% 
  get_MISE_for_all_methods(reference = function(x) dmixnorm(x, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights), numit = 2000, ncores = 6) %>% 
  print_RMISE_for_all_methods
```

###Density plot


```{r, eval=T}
fits_on_multimodal100_for_all_methods %>% 
  get_average_density_estimates(xs = xs_multimodal, ncores = 6) %>% 
  plot_average_density_estimates(function(x) dmixnorm(x, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights))
```

## Illustration of fits and simulated data

```{r}
rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))

fits_on_normal20_for_all_methods = load_file('normal20')
xs_normal = seq(-3,3,length.out = 52)
average_density_estimates_normal20 = fits_on_normal20_for_all_methods %>% 
  get_average_density_estimates(xs = xs_normal) 
  

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))

fits_on_student20_for_all_methods = load_file('student20')
xs_student = seq(-10,4,length.out = 52)
average_density_estimates_student20 = fits_on_student20_for_all_methods %>% 
  get_average_density_estimates(xs = xs_student)

rm(list = grep('_for_all_methods', ls(), value = T) %>% grep('fits', ., value = T))

fits_on_multimodal20_for_all_methods = load_file('multimodal20')
xs_multimodal = seq(-6,10,length.out = 100)
average_density_estimates_multimodal20 = fits_on_multimodal20_for_all_methods %>% 
  get_average_density_estimates(xs = xs_multimodal)

```

```{r}
reference_grids = list(xs_normal, xs_student, xs_multimodal) %>% setNames(c("normal", "student", "multimodal"))

reference_densities = list('normal' = dnorm,
                  'student' = function(x) dt(x, df = 3, ncp = -2),
                  # 'skew_normal' = function(x) dsn(x, xi = 0, omega = 1, alpha = -3),
                  'multimodal' = function(x) dmixnorm(x, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights))

reference_densities_to_plot = reference_densities %>% 
  names %>% 
  lapply(function(nm) reference_densities[[nm]](reference_grids[[nm]]) %>% tibble(dens = ., xs = reference_grids[[nm]], data_type = paste(nm, 20))) %>% 
  bind_rows() %>% 
  mutate(data_type = str_to_title(data_type)) %>% 
    mutate(data_type = factor(data_type, 
                            levels = c("Normal 20", "Student 20", "Multimodal 20")))
```

```{r}
average_density_estimates = rbind(average_density_estimates_normal20 %>% mutate(data_type = "Normal 20"),
                                  average_density_estimates_student20 %>% mutate(data_type = "Student 20"),
                                  average_density_estimates_multimodal20 %>% mutate(data_type = "Multimodal 20")) %>% 
  subset(data_type != "skew_normal") %>% 
  subset(!grepl("truncated_normal", type)) %>% 
  subset(!grepl("semi", type)) %>% 
  subset(!grepl("logistic", type)) %>% 
    mutate(data_type = factor(data_type, 
                            levels = c("Normal 20", "Student 20", "Multimodal 20")))

p = average_density_estimates  %>% 
  ggplot(aes(x = xs, y = dens, colour = type)) + 
  geom_line(data = reference_densities_to_plot, colour = "black") +
  geom_line(size = 1.5, linetype = 2) + 
  facet_wrap(~data_type, scales = "free") + 
  theme_few() + 
  scale_colour_few(name = 'Model type', labels = c("BNP", "KDE", "Normal")) +
  xlab("") + 
  ylab("Density") #+ 
  # 

print(p)
```

```{r}
pdf("../illustration_simulated_data.pdf")
print(p)
dev.off()
```


##Summary graph for simulated data


```{r}
to_plot = list()

datasets = expand.grid(c('normal', 'student', "skew_normal",'multimodal'), c(10,20,50,100))
reference_densities = list('normal' = dnorm,
                  'student' = function(x) dt(x, df = 3, ncp = -2),
                  'skew_normal' = function(x) dsn(x, xi = 0, omega = 1, alpha = -3),
                  'multimodal' = function(x) dmixnorm(x, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights))

reference_quantiles = list('normal' = qnorm(0.05),
                  'student' = qt(0.05, df = 3, ncp = -2),
                  'skew_normal' = qsn(0.05, xi = 0, omega = 1, alpha = -3),
                  'multimodal' = qmixnorm(0.05, mus = c(-2, 5), sigmas = c(1,1), probs = c(2,4) %>% normalise_weights))


for( i in seq_len(nrow(datasets))){
  print(i)
  to_plot[[i]] = paste(datasets[i,1], datasets[i,2], sep = '') %>% 
    load_file %>% 
    (function(fit_list){
      df_RMISE = fit_list %>% 
        get_MISE_for_all_methods(reference = reference_densities[[datasets[i,1]]], numit = 2000) %>% 
        mutate(RMISE = MISE/MISE[type=='normal_kernel_mixture_ssd']) %>% 
        # dplyr::select(type, RMISE) %>% 
        dplyr::select(type, MISE) %>% 
        mutate(size = datasets[i,2], data_type = datasets[i,1]) 
      
      df_quantile = fit_list %>% 
        get_quantile_CI_mean_length_for_all_methods(reference_quantile = reference_quantiles[[datasets[i,1]]], 
                                                    numit = 10000) %>% 
        # dplyr::select(Mean_absolute_bias, Mean_bias, Mean_CI_length, type)
        dplyr::select(Mean_absolute_bias, Mean_CI_length, type)
      
      left_join(df_RMISE, df_quantile)
    })
  
}

to_plot = to_plot %>% 
  Reduce(rbind,.) %>%
  # gather(variable, value, RMISE, Mean_absolute_bias:Mean_CI_length)
  gather(variable, value, MISE, Mean_absolute_bias:Mean_CI_length)

```

```{r}
p = to_plot %>% 
  subset(data_type != "skew_normal") %>% 
  subset(!grepl("truncated_normal", type)) %>% 
  subset(!grepl("semi", type)) %>% 
  subset(!grepl("logistic", type)) %>% 
  mutate(data_type = str_to_title(data_type)) %>% 
  mutate(data_type = factor(data_type, 
                            levels = c("Normal", "Student", "Multimodal"))) %>% 
  mutate(variable = gsub("_", " ", variable)) %>% 
  mutate(variable = factor(variable, levels = c("Mean absolute bias", "MISE", "Mean CI length"))) %>% 
  ggplot(aes(y = value, x = factor(size), colour = type, group = type)) +
  geom_line(linetype = 'dashed') + 
  geom_point() +
  xlab('dataset size') +
  facet_grid(variable~data_type, scale = 'free_y') + 
  theme_few() + 
  scale_colour_few(name = 'Model type', labels = c("BNP", "KDE", "Normal")) + 
  ylab("") + 
  xlab("Dataset size")


print(p)

# p %>% 
#   clean_background
```

```{r}
pdf('../graph_comparison_simulated_data.pdf')
print(p)
dev.off()
```

# Looking at the clustering

```{r}
source('load_rivm_db.R')
#Selection for the JASA paper
# big_c_list = c('122145','7733020','298000')
# med_c_list = c('7632000','654660','91203')
# small_c_list = c('9016459','61791262','115208')
big_c_list = c('63252','7758987','7778509')
med_c_list = c('56382','42615292','1420048')
small_c_list = c('114261','10588019','2764729')

ex_c_list = c(big_c_list, med_c_list, small_c_list) #%>% sapply(FUN = CAS_short_name_converter)
# n_clust_per_c = readRDS('n_clust_per_c.Rdata')
n_clust_per_c = readRDS('n_clust_per_c_new.Rdata')
```

```{r}
try_to_read = function(path){
  res = try(readRDS(path))
  
  if(inherits(res, 'try-error')) res = get(load(path))
  
  return(res)
}

clean_c_path = function(c_path){
  c_path %>% 
    gsub('/home/guillaume/Seafile/auto_shared/chains_rivm_clustering/','',.) %>%
    gsub('/home/guillaume/Seafile/auto_shared/chains_rivm_clustering_new//','',.) %>%
    gsub('/home/guillaume/Seafile/auto_shared/chains_rivm_clustering_new/','',.) %>%
    gsub("_BNP_mixture_ssd_mu0_5_sigma1_truncated_normal_Gama0_4.Rdata","",.) %>% 
    gsub("_BNP_mixture_ssd_mu0_1_sigma1_5_uniform_Gama0_4.Rdata","",.) 
}

get_data_species_names = function(fname){
  fname %>% 
    gsub('minVIs/','',.) %>% 
    gsub('.Rdata','',.) %>% 
    (function(x){
      
      cens_ = x %>% 
                    gsub('[[:digit:]]+', '', .) %>% 
                    (function(x) x=='c')
      
      get_log_dat(x %>% 
                    gsub('([0-9]*).*', '\\1', .), 
                  cens = cens_, names = T) %>% 
        (function(y){
          if(cens_) return(y$species)
          else return(names(y))
        })
    }) 
}

get_data_species_names_new = function(fname){
  fname %>% 
    gsub('minVIs/','',.) %>% 
    gsub('minVIs_new/','',.) %>% 
    gsub('.Rdata','',.) %>% 
    (function(x){
      
      cens_ = x %>% 
                    gsub('[[:digit:]]+', '', .) %>% 
                    (function(x) x=='c')
      
      get_log_dat(x %>% 
                    gsub('([0-9]*).*', '\\1', .), 
                  cens = cens_, names = T, geomean = T, filt_hickey = T) %>% 
        (function(y){
          if(cens_) return(y$species)
          else return(names(y))
        })
    }) 
}

create_major_taxon_converter = function(){
  convert_list = get(load('rivm_db.Rdata')) %>% 
    dplyr::select(species, major) %>% 
    unique() %>% 
    mutate(species = as.character(species), major = as.character(major)) %>% 
    (function(x){
    x$major %>% 
        setNames(x$species)
    })
  
  convert_fun = function(keys){
    sapply(keys, function(key) convert_list[[as.character(key)]])
  }
}

convert_to_major_taxon = create_major_taxon_converter()


create_major_to_phylum_converter = function(){
  convert_list = read_csv("major_codes.csv") %>% 
    dplyr::select(Major_code, `Phylum/Division`) %>% 
    unique %>%
    (function(x){
     c(x$`Phylum/Division`) %>% 
        setNames(c(x$Major_code))
    })
  
  convert_fun = function(keys){
    sapply(keys, function(key) convert_list[[as.character(key)]])
  }
}

convert_major_to_phylum = create_major_to_phylum_converter()


create_major_to_SSDbookGroup_converter = function(){
  convert_list = read_csv("major_codes.csv") %>% 
    dplyr::select(Major_code, SSD_book_group) %>% 
    unique %>%
    (function(x){
     c(x$SSD_book_group) %>% 
        setNames(c(x$Major_code))
    })
  
  convert_fun = function(keys){
    sapply(keys, function(key) convert_list[[as.character(key)]])
  }
}

convert_major_to_SSDbookGroup = create_major_to_SSDbookGroup_converter()

convert_species_to_phylum = function(keys){keys %>% convert_to_major_taxon() %>% convert_major_to_phylum()}
convert_species_to_SSDbookGroup = function(keys){keys %>% convert_to_major_taxon() %>% convert_major_to_SSDbookGroup()}

plot_cdf_group_and_cluster = function(c_path, species_convert_fun, title = TRUE){
  
  fit1 = try_to_read(c_path)
  
  c_name = c_path %>% 
    clean_c_path() %>% 
    gsub("nc","",.) %>% 
    gsub("c","",.) %>% 
    CAS_short_name_converter()
  
  fname = c_path %>% 
    clean_c_path() %>% 
    paste('minVIs_new/',., '.Rdata', sep = '')
  
  fit1.VI = readRDS(fname)
  
  if(is.censored(fit1$data_)){
    loc_species_names = fit1$data_ %>% rowMeans(na.rm = TRUE)
  }
  else{
    loc_species_names = fit1$data_
  }
  
  curve_dat = tibble(xs = get_plotting_range(fit1$data_)) %>%
    mutate(cdf_ = get_cdf(fit1, xs = xs)) %>% 
    (function(df){
      rbind(df %>% mutate(colour_scheme = "Coloured by species group"),
            df %>% mutate(colour_scheme = "Coloured by cluster membership"))
    })
  
  p = tibble(loc_species_names = loc_species_names,
         species_nm = get_data_species_names_new(fname) %>% as.character(),
         height_species_names = get_cdf(fit1, xs =  loc_species_names),
         alloc = fit1.VI$cl) %>%
    mutate(cv_nm = species_convert_fun(species_nm)) %>% 
    (function(df){
      rbind(df %>% mutate(colour_scheme = "Coloured by species group", colour = cv_nm),
            df %>% mutate(colour_scheme = "Coloured by cluster membership", colour = alloc %>% as.character()))
    }) %>% 
    mutate(colour_scheme = factor(colour_scheme, levels = c("Coloured by species group", "Coloured by cluster membership"))) %>% 
    ggplot(aes(x = loc_species_names, y = height_species_names, colour = factor(colour), label = cv_nm)) + 
    geom_text() +
    facet_grid(.~colour_scheme) + 
    theme_few() + 
    scale_colour_ptol(guide = FALSE) + 
    xlab("Concentration") + 
    ylab("Fraction affected") + 
    geom_line(data = curve_dat %>% 
    mutate(colour_scheme = factor(colour_scheme, levels = c("Coloured by species group", "Coloured by cluster membership"))), aes(x = xs, y = cdf_, colour = NULL, label = NULL)) 
  
  if(title){
    return(p + ggtitle(c_name))
  }
  else{
    p
  }
    
}
```

```{r}
p = "Carbaryl" %>% 
  CAS_short_name_converter() %>% 
  (function(x){
    n_clust_per_c %>% 
      subset(grepl(x, c)) %>% 
      subset(!grepl('nc_', c))
    }) %>% 
  .$c %>% 
  as.character %>% 
  plot_cdf_group_and_cluster(convert_species_to_SSDbookGroup, title = F)
print(p)
pdf("../example_clustering_post_analysis.pdf")
print(p)
dev.off()
```

