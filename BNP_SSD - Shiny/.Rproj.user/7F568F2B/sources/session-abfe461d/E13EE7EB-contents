# Copyright 2019 Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.

utils::globalVariables(c("."))

# functions
label_mandatory <- function(label) {
  tagList(
    label,
    span("*", class = "mandatory_star")
  )
}

inline <- function(x) {
  tags$div(style = "display:inline-block;", x)
}

hint <- function(x) HTML(paste0("<font color='grey'>", x, "</font>"))

zero_range <- function(x, tol = .Machine$double.eps^0.5) {
  if (length(x) == 1) {
    return(TRUE)
  }
  x <- range(na.omit(x)) / mean(na.omit(x))
  isTRUE(all.equal(x[1], x[2], tolerance = tol))
}

Log_scale <- function(x_l, x_u){
  if(all(conc_l == conc_l, na.rm = TRUE)){
    x <- log(x_u)
    return(list(left=x, right=x))
  }
  else{
    return(list(left=log(x_l), right=log(x_l)))
  }
}

center_scale <- function(x_l, x_u){
  if(all(conc_l == conc_l, na.rm = TRUE)){
    return(list(left=(x_l - mean(x_l, na.rm = T))/sd(x_l, na.rm = T), 
                right=(x_l - mean(x_l, na.rm = T))/sd(x_l, na.rm = T)))
  }
  else{
    fit <- fitdistrplus::fitdistcens(data=data.frame(right=x_u, left=x_l), 
                                  "norm")
    return(list(left=(x_l - fit$estimate[1])/fit$estimate[2], 
                right=(x_u - fit$estimate[1])/fit$estimate[2]))
  }
}


plot_distributions <- function(x, ylab, xlab, text_size){
  gp <- plot(x)
  gp <- gp +
    ggplot2::theme_classic() +
    ggplot2::theme(
      axis.text = ggplot2::element_text(size = text_size),
      axis.title = ggplot2::element_text(size = text_size),
      legend.title = ggplot2::element_text(size = text_size),
      legend.text = ggplot2::element_text(size = text_size)
    )
  gp
}

### Ã€ VIRER ###
estimate_hc <- function(x, percent) {
  ssdtools::ssd_hc(x, proportion = percent / 100, nboot = 10L, min_pboot = 0.8, multi_est = TRUE, multi_ci = FALSE)$est
}

estimate_hp <- function(x, conc) {
  ssdtools::ssd_hp(x = x, conc = conc, nboot = 10L, min_pboot = 0.8, multi_est = TRUE, multi_ci = FALSE)$est
}

ssd_hc_ave <- function(x, percent, nboot) {
  dist <- ssdtools::ssd_hc(x,
                           proportion = percent / 100, ci = TRUE,
                           average = FALSE, nboot = nboot, min_pboot = 0.8,
                           multi_est = TRUE, multi_ci = FALSE
  )
  
  if (length(x) == 1) {
    ave <- dist
    ave$dist <- "average"
  } else {
    ave <- ssdtools::ssd_hc(x,
                            proportion = percent / 100, ci = TRUE,
                            average = TRUE, nboot = nboot, min_pboot = 0.8,
                            multi_est = TRUE, multi_ci = FALSE
    )
  }
  
  dplyr::bind_rows(ave, dist) %>%
    dplyr::mutate_at(c("est", "se", "ucl", "lcl", "wt"), ~ signif(., 3))
}

ssd_hp_ave <- function(x, conc, nboot) {
  dist <- ssdtools::ssd_hp(x,
                           conc = conc, ci = TRUE,
                           average = FALSE, nboot = nboot, min_pboot = 0.8
  )
  
  if (length(x) == 1) {
    ave <- dist
    ave$dist <- "average"
  } else {
    ave <- ssdtools::ssd_hp(x,
                            conc = conc, ci = TRUE,
                            average = TRUE, nboot = nboot,
                            multi_est = TRUE, multi_ci = FALSE,
                            min_pboot = 0.8
    )
  }
  
  dplyr::bind_rows(ave, dist) %>%
    dplyr::mutate_at(c("est", "se", "ucl", "lcl", "wt"), ~ signif(., 3))
}