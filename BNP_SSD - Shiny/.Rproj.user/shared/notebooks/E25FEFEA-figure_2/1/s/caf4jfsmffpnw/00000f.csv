"0",""
"0","make_fname = function(dataset_type, idx, method){"
"0","  paste('chains_model_comparison_simulated_data/',"
"0","        dataset_type,'_', "
"0","        idx,'_', "
"0","        method, '.Rdata', sep = '')"
"0","}"
"0",""
"0",""
"0","create_funlist = function(nit){"
"0","  list('normal_ssd' = fit_normal_ssd_on_log_data, "
"0","       # 'logis_ssd' = fit_logis_ssd_on_log_data,"
"0","       'kde_ssd' = fit_kernel_mixture_ssd_on_log_data,"
"0","       'BNP_mixture_uniform_prior' = function(x) fit_BNP_mixture_ssd_on_log_data_uniform(ddat = x, mu.pz0 = 0.1, sigma.pz0 = 1.5, Nit = nit)#,       "
"0","       # 'BNP_mixture_truncated_normal_prior' = function(x) fit_BNP_mixture_ssd_on_log_data_truncated_normal(ddat = x, mu.pz0 = 0.5, sigma.pz0 = 1, Nit = nit),"
"0","       # 'semi_BNP_mixture_gamma_prior' = function(x) fit_semi_BNP_mixture_ssd_on_log_data(ddat = x, Nit = nit)"
"0","       )"
"0","}"
"0",""
"0","Var = function(x,...){"
"0","  y = length(x)"
"0","  var(x,...)*(y-1)/y"
"0","}"
"0",""
"0",""
"0","Sd = function(x,...){"
"0","  y = length(x)"
"0","  sd(x,...)*sqrt((y-1)/y)"
"0","}"
"0",""
"0","create_normal_datasets = function(size = 10, number = 40){"
"0","  set.seed(0)"
"0","  1:number %>% "
"0","    lapply(FUN =  function(x) rnorm(n = size, mean = 0, sd = 1))"
"0","}"
"0","create_student_datasets = function(size = 10, number = 40, df = 3, ncp = -2){"
"0","  set.seed(0)"
"0","  1:number %>% "
"0","    lapply(FUN =  function(x) rt(n = size, df = df, ncp = ncp))"
"0","}"
"0",""
"0","normalise_weights = function(unnormalized_weights){"
"0","  unnormalized_weights / sum(unnormalized_weights)"
"0","}"
"0",""
"0","rmixnorm = function(n, mus, sigmas, probs) {"
"0","  if(sum(probs)!=1) stop('check all the weights')"
"0","  if (length(unique(length(mus), length(sigmas), length(probs))) != 1){"
"0","    stop('Check your number of means, sds, unnormalized_weights')"
"0","  }"
"0","  "
"0","  rmultinom(n = 1, size = n, prob = probs) %>%"
"0","    as.numeric() %>%"
"0","    (function(x) {"
"0","      mapply(FUN = function(n_, mean_, sd_) {rnorm(n_, mean_, sd_)}, x, mus, sigmas)"
"0","    }) %>%"
"0","    unlist() %>% "
"0","    as.vector()"
"0","}"
"0",""
"0","create_multimodal_datasets = function(size = 10, number = 40, mus, sigmas, unnormalized_weights) {"
"0","  set.seed(0)"
"0","  1:number %>%"
"0","    lapply("
"0","      FUN =  function(x) {"
"0","        rmixnorm("
"0","          n = size, mus = mus, sigmas = sigmas, probs = unnormalized_weights %>% normalise_weights"
"0","        )"
"0","      }"
"0","    )"
"0","}"
"0",""
"0","library(sn)"
"0",""
"0","create_skewed_normal_datasets = function(size = 10, number = 40, xi = 0, omega = 1, alpha = -3){"
"0","  set.seed(0)"
"0","  1:number %>% "
"0","    lapply(FUN =  function(x) rsn(n = size, xi = xi, omega = omega, alpha = alpha)%>% as.numeric()) "
"0","}"
"0",""
"0","create_dataset_list = function(){"
"0","  dataset_creators_list = list('normal' = create_normal_datasets,"
"0","                               'student' = create_student_datasets,"
"0","                               'multimodal' = function(size, number) create_multimodal_datasets(size = size, number = number,"
"0","                                                                                                mus = c(-2, 5),"
"0","                                                                                                sigmas = c(1,1),"
"0","                                                                                                unnormalized_weights = c(2,4)))"
"0","  sizes = c(10,20,50,100)"
"0","  expand.grid(dataset_creators_list %>% names, sizes) %>% "
"0","    (function(grid){"
"0","      mapply(FUN = function(creator_name, size){dataset_creators_list[[creator_name]](size = size, number = 40)}, grid$Var1, grid$Var2, SIMPLIFY = F) %>% "
"0","        setNames(mapply(FUN = function(creator_name, size) paste(creator_name, size, sep = ''), grid$Var1, grid$Var2, SIMPLIFY = F))})"
"0","}"
"0",""
"0","load_or_compute = function(dataset_type, idx, method){"
"0","  if(method%in%c('normal_ssd', 'logis_ssd', 'kde_ssd')) compute(dataset_type, idx, method)"
"0","  else{"
"0","    fname = make_fname(dataset_type, idx, method)"
"0","    if(file.exists(fname)) readRDS(fname)"
"0","    else compute_and_save_and_return(dataset_type, idx, method)"
"0","    }"
"0","}"
"0",""
"0","save_if_not_present = function(dataset_type, idx, method){"
"0","  if(method%in%c('normal_ssd', 'logis_ssd', 'kde_ssd')) return()"
"0","  else{"
"0","    fname = make_fname(dataset_type, idx, method)"
"0","    if(file.exists(fname)) return()"
"0","    else compute_and_save(dataset_type, idx, method)"
"0","  }"
"0","}"
"0",""
"0","compute = function(dataset_type, idx, method){"
"0","  get_data(dataset_type, idx) %>% "
"0","    funlist[[method]]()"
"0","}"
"0",""
"0","compute_and_save_and_return = function(dataset_type, idx, method){"
"0","  res = get_data(dataset_type, idx) %>% "
"0","    funlist[[method]]()"
"0","  saveRDS(object = res, file = make_fname(dataset_type, idx, method))"
"0","  return(res)"
"0","}"
"0",""
"0","compute_and_save = function(dataset_type, idx, method){"
"0","  res = get_data(dataset_type, idx) %>% "
"0","    funlist[[method]]()"
"0","  saveRDS(object = res, file = make_fname(dataset_type, idx, method))"
"0","  return()"
"0","}"
"0",""
"0","get_data = function(dataset_type, idx){"
"0","  dataset_list[[dataset_type]][[idx]]"
"0","}"
"0",""
"0","fit_all_methods_on_all_the_datasets = function(dataset_list, funlist){"
"0","  "
"0","  dataset_list %>% "
"0","    names %>% "
"0","    lapply(FUN = function(dataset_type) expand.grid(dataset_type, 1:length(dataset_list[[dataset_type %>% as.character()]]), funlist %>% names, stringsAsFactors = F)) %>% "
"0","    Reduce(rbind,.)  %>% "
"0","    setNames(c('dataset_type', 'idx', 'method')) %>% "
"0","    (function(grid){mcmapply(FUN = save_if_not_present, grid$dataset_type, grid$idx, grid$method, mc.cores = detectCores()-1)})"
"0","  "
"0","}"
"0",""
"0",""
"0","get_quantiles_for_all_methods = function(list_of_list_of_fits, reference_quantile, numit = 2500, ncores = 6){"
"0","  list_of_list_of_fits %>% "
"0","    lapply(FUN = function(list_of_fits){"
"0","      list_of_fits %>% "
"0","        mclapply(FUN = function(fit){"
"0","          fit %>% "
"0","            thin_fit(numit = numit) %>% "
"0","            get_quantiles(ps = 0.05, par_ = F)}, mc.cores = ncores) %>% "
"0","        unlist() %>% "
"0","        (function(x) {c(mean(x), "
"0","                        quantile(x, probs = c(0.025,0.5,0.975)), "
"0","                        Sd(x), "
"0","                        mean(abs(x-reference_quantile)),"
"0","                        mean(x-reference_quantile),"
"0","                        reference_quantile)} ) %>% "
"0","        t %>% "
"0","        data.frame() %>% "
"0","        setNames(c('Mean_estimate','infCI','med','supCI', 'std', 'Mean_absolute_bias', 'Mean_bias', 'Reference')) %>% "
"0","        mutate(type = list_of_fits[[1]]$qmethod)"
"0","          }) %>% "
"0","        Reduce(rbind,.)"
"0","}"
"0",""
"0","get_quantile_CI_mean_length_for_all_methods = function(list_of_list_of_fits, reference_quantile, numit = 2500, ncores = 6, nbootsamples = 102){"
"0","  list_of_list_of_fits %>% "
"0","    lapply(FUN = function(list_of_fits){"
"0","      list_of_fits %>% "
"0","        mclapply(FUN = function(fit){"
"0","          fit %>% "
"0","            thin_fit(numit = numit) %>% "
"0","            get_quantiles_and_CI(p = 0.05, par_ = F, nbootsamples = nbootsamples)}, mc.cores = ncores) %>% "
"0","        Reduce(rbind,.) %>% "
"0","        mutate(CI_length = C_sup-C_inf) %>% "
"0","        (function(resdf) {c(mean(resdf$HC), "
"0","                        quantile(resdf$HC, probs = c(0.025,0.5,0.975)), "
"0","                        Sd(resdf$HC), "
"0","                        mean(abs(resdf$HC-reference_quantile)),"
"0","                        mean(resdf$HC-reference_quantile),"
"0","                        reference_quantile,"
"0","                        mean(resdf$CI_length),"
"0","                        quantile(resdf$CI_length, probs = c(0.025,0.5,0.975)))} ) %>% "
"0","        t %>% "
"0","        data.frame() %>% "
"0","        setNames(c('Mean_estimate','infCI','med','supCI', 'std', 'Mean_absolute_bias', 'Mean_bias', 'Reference', 'Mean_CI_length','len_infCI','len_med','len_supCI')) %>% "
"0","        mutate(type = list_of_fits[[1]]$qmethod)"
"0","          }) %>% "
"0","        Reduce(rbind,.)"
"0","}"
"0",""
"0","format_est_CI = function(est, infCI, supCI){"
"0","  c(est, infCI, supCI) %>% "
"0","    formatC(digits = 3) %>%"
"0","    (function(x){"
"0","      paste(x[[1]], ' [',x[[2]],';',x[[3]],']', sep = '')"
"0","    })"
"0","  }"
"0",""
"0","print_quantiles_for_all_methods = function(quantiles_for_all_methods){"
"0","  quantiles_for_all_methods %>% "
"0","    mutate(Mean_estimate_and_95CI = mapply(FUN = format_est_CI, Mean_estimate, infCI, supCI)) %>% "
"0","    dplyr::select(c(Reference, Mean_estimate_and_95CI, Mean_bias, Mean_absolute_bias, std, type)) %>% "
"0","    kable(digits = 3)"
"0","}"
"0",""
"0","print_quantiles_and_CI_length_for_all_methods = function(quantiles_and_CI_length){"
"0","  quantiles_and_CI_length %>% "
"0","    mutate(Mean_estimate_and_95CI = mapply(FUN = format_est_CI, Mean_estimate, infCI, supCI)) %>% "
"0","    dplyr::select(c(Reference, Mean_estimate_and_95CI, Mean_bias, Mean_absolute_bias, std, type,Mean_CI_length)) %>% "
"0","    kable(digits = 3)"
"0","}"
"0",""
"0","get_average_density_estimates = function(list_of_list_of_fits, xs = seq(-3, 3, length.out = 30), ncores = 6){"
"0","  list_of_list_of_fits %>% "
"0","    lapply(FUN = function(list_of_fits){"
"0","      list_of_fits %>% "
"0","        mclapply(FUN = function(fit){"
"0","          fit %>% "
"0","            get_dens(xs = xs)}, mc.cores = ncores) %>% "
"0","        Reduce(cbind,.) %>% "
"0","        rowMeans %>%  "
"0","        data.frame(dens = .) %>% "
"0","        mutate(type = list_of_fits[[1]]$qmethod, xs = xs)"
"0","          }) %>% "
"0","        Reduce(rbind,.)"
"0","}"
"0",""
"0","plot_average_density_estimates = function(average_density_estimates, reference = NULL){"
"0","  "
"0","  p = average_density_estimates %>% "
"0","    mutate(type = factor(type, levels = unique(type) %>% sort)) %>% "
"0","      ggplot(aes(x = xs, y = dens, colour = type)) +"
"0","    ylab('Average density estimate') +"
"0","    xlab('')"
"0","  "
"0","  if(is.null(reference)){"
"0","    p + geom_line()"
"0","  } "
"0","  else {"
"0","    refdens = average_density_estimates$xs %>% "
"0","      data.frame(xs = ., dens = reference(.))"
"0","    "
"0","    p + "
"0","      geom_line(linetype = 2, size = 1.5) +"
"0","      geom_line(data = refdens, aes(x = xs, y = dens), colour = 'black', size = 1.5)"
"0","  }"
"0","  "
"0","}"
"0",""
"0","cmp_ISE_fit = function(fit, reference) {"
"0","  "
"0","  estimate = function(x) get_dens(fit = fit, xs = x)"
"0","  "
"0","  integrate(function(x) (estimate(x) - reference(x))**2,"
"0","            lower = -Inf,"
"0","            upper = Inf)"
"0","}"
"0",""
"0","get_MISE_for_all_methods = function(list_of_list_of_fits, reference_dist, numit = 10**6, ncores = 6){"
"0","  list_of_list_of_fits %>% "
"0","    lapply(FUN = function(list_of_fits){"
"0","      list_of_fits %>% "
"0","        mclapply(FUN = function(fit){cmp_ISE_fit(fit %>% thin_fit(numit = numit), reference_dist)$value}, mc.cores = ncores) %>% "
"0","        unlist() %>% "
"0","        (function(x) c(mean(x), quantile(x, probs = c(0.025,0.5,0.975)), Sd(x)) ) %>% "
"0","        t %>% "
"0","        data.frame() %>% "
"0","        setNames(c('MISE','infCI','med','supCI', 'std')) %>% "
"0","        mutate(type = list_of_fits[[1]]$qmethod)"
"0","          }) %>% "
"0","        Reduce(rbind,.)"
"0","}"
"0",""
"0","print_RMISE_for_all_methods = function(MISE_for_all_methods){"
"0","  MISE_for_all_methods %>% "
"0","    mutate(Mean_MISE_and_95CI = mapply(FUN = format_est_CI, MISE, infCI, supCI)) %>% "
"0","    (function(x){"
"0","      if ('normal_kernel_mixture_ssd'%in%x$type ){"
"0","        MISE_nkerdens = as.numeric(subset(x,type == 'normal_kernel_mixture_ssd')$MISE)"
"0","        x %>% "
"0","          mutate(RMISE = MISE/MISE_nkerdens)"
"0","      }"
"0","        else x"
"0","    }) %>% "
"0","    dplyr::select(c(RMISE, Mean_MISE_and_95CI, std, type)) %>% "
"0","    kable(digits = 3)"
"0","}"
"0",""
"0",""
"0","save_all_models = function(fits_for_all_methods, fname){"
"0","  save(fits_for_all_methods, file = paste('chains_model_comparison_simulated_data/',fname,'.Rdata', sep = ''))"
"0","}"
"0",""
"0",""
"0","load_compute_or_pass = function(dataset_type, idx, method){"
"0","  if(method%in%c('normal_ssd', 'logis_ssd', 'kde_ssd')) compute(dataset_type, idx, method)"
"0","  else{"
"0","    fname = make_fname(dataset_type, idx, method)"
"0","    if(file.exists(fname)) readRDS(fname)"
"0","    else return()"
"0","    }"
"0","}"
"0",""
"0","## A helper function that tests whether an object is either NULL _or_"
"0","## a list of NULLs"
"0","is.NullOb <- function(x) is.null(x) | all(sapply(x, is.null))"
"0","## Recursively step down into list, removing all such objects"
"0","rmNullObs <- function(x) {"
"0","x <- Filter(Negate(is.NullOb), x)"
"0","lapply(x, function(x) if (is.list(x)) rmNullObs(x) else x)"
"0","}"
"0",""
"0","rmNull = function(list_){"
"0","  list_[!sapply(list_, is.null)]"
"0","}"
"0",""
"0","get_all_fits = function(dataset_type){"
"0","  "
"0","  funlist %>% "
"0","    names %>% "
"0","    # .[1:3] %>% "
"0","    lapply(FUN = function(fun){"
"0","      expand.grid(dataset_type, 1:length(dataset_list[[dataset_type %>% as.character()]]), fun, stringsAsFactors = F) %>% "
"0","    setNames(c('dataset_type', 'idx', 'method')) %>% "
"0","    (function(grid){mapply(FUN = load_compute_or_pass, grid$dataset_type, grid$idx, grid$method, SIMPLIFY = F)}) %>% rmNull"
"0","    })"
"0","  "
"0","}"
"0",""
"0","Collect_in_a_single_file = function(dataset_type){"
"0","  res = get_all_fits(dataset_type)"
"0","  saveRDS(object = res, file = paste('chains_model_comparison_simulated_data/',dataset_type,'.Rdata', sep = ''))"
"0","}"
"0",""
"0",""
"0","load_file = function(dataset_type){"
"0","  readRDS(paste('chains_model_comparison_simulated_data/',dataset_type,'.Rdata', sep = ''))"
"0","}"
"0",""
